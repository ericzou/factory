var chai = require('chai');
var expect = chai.expect;
var factory = require('../src/factory.js');

describe('Factory', function () {
  var aFactory;
  beforeEach(function () {
    aFactory = factory();
  });

  it('is a function', function () {
    expect(factory).to.be.a('function')
  });

  describe('#attr', function () {

    it('sets the attributes', function () {
      aFactory.attr('id', 10);
      expect(aFactory()).to.eql({id: 10});
    });

    it('chainable', function () {
      aFactory.attr('id', 10).attr('name', 'foo');
      expect(aFactory()).to.eql({id: 10, name: 'foo' });
    });

  }); //#attr

  describe('when called', function () {
    describe('default', function () {
      it('returns an empty object', function () {
        expect(aFactory()).to.eql({});
      });
    });

    describe('with blueprint set', function () {
      describe('as values', function () {
        it('returns an object with values same as the blueprint', function () {
          aFactory = factory({id: 10});
          expect(aFactory()).to.eql({id: 10});
        })
      });

      describe('as function', function () {
        it('returns an object with values generated by the function in the blueprint', function () {
          aFactory = factory({ id: function () {
            return 10;
          }});
          expect(aFactory()).to.eql({id: 10});
        });
      });
    }); //with blueprint set

    describe('with arguments', function () {
      it('sets attributes', function () {
        expect(aFactory({name: 'bar'})).to.eql({name: 'bar'});
      });

      it('overrides attributes', function () {
        aFactory.attr('name', 'bar');
        expect(aFactory({name: 'foo'})).to.eql({name: 'foo'});
      });
    });
  }); //when called
});
